# Script PowerShell pour build Docker LOCAL uniquement
# Pas de registry - juste pour d√©veloppement local

param(
    [string]$ImageName = "python-videogames-processor",
    [string]$Version = "latest",
    [string]$GitRepoUrl = "https://github.com/yannoushka74/Video_games_market.git",
    [switch]$SkipTest,
    [switch]$Rebuild
)

Write-Host ""
Write-Host "üéÆ Build Docker LOCAL - Processeur de Jeux Vid√©o" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier Docker
Write-Host "V√©rification de Docker..." -ForegroundColor Yellow
docker --version 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Docker non trouv√© ou non d√©marr√©" -ForegroundColor Red
    Write-Host "üí° Assurez-vous que Docker Desktop est lanc√©" -ForegroundColor Yellow
    exit 1
}
Write-Host "‚úÖ Docker OK" -ForegroundColor Green
Write-Host ""

# Configuration
Write-Host "‚öôÔ∏è Configuration:" -ForegroundColor White
Write-Host "  Image: $ImageName" -ForegroundColor Yellow
Write-Host "  Version: $Version" -ForegroundColor Yellow
Write-Host "  Build context: $(Get-Location)" -ForegroundColor Yellow
Write-Host ""

# V√©rifier si l'image existe d√©j√†
$imageExists = docker images -q "$ImageName`:$Version" 2>$null
if ($imageExists -and -not $Rebuild) {
    Write-Host "‚ö†Ô∏è L'image $ImageName`:$Version existe d√©j√†" -ForegroundColor Yellow
    $response = Read-Host "Rebuilder l'image? (y/N)"
    if ($response -notmatch "^[Yy]") {
        Write-Host "‚è≠Ô∏è Build ignor√© - utilisation de l'image existante" -ForegroundColor Yellow
        $skipBuild = $true
    }
}

# Build de l'image (si n√©cessaire)
if (-not $skipBuild) {
    Write-Host "üèóÔ∏è Construction de l'image Docker..." -ForegroundColor Cyan
    
    # Arguments de build
    $buildArgs = @(
        "build",
        "--tag", "$ImageName`:$Version"
    )
    
    # Ajouter l'URL Git si sp√©cifi√©e
    if ($GitRepoUrl) {
        $buildArgs += "--build-arg"
        $buildArgs += "GIT_REPO_URL=$GitRepoUrl"
    }
    
    # Ajouter le contexte (r√©pertoire actuel)
    $buildArgs += "."
    
    Write-Host "Commande: docker $($buildArgs -join ' ')" -ForegroundColor Gray
    Write-Host ""
    
    # Ex√©cuter le build
    & docker @buildArgs
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Image construite avec succ√®s!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors du build" -ForegroundColor Red
        exit 1
    }
    Write-Host ""
}

# Test de l'image (optionnel)
if (-not $SkipTest) {
    Write-Host "üß™ Test de l'image..." -ForegroundColor Cyan
    
    $currentDate = Get-Date -Format "yyyy-MM-dd"
    $runId = "test-$(Get-Date -Format 'yyyyMMddHHmmss')"
    
    $testCmd = @(
        "run", "--rm",
        "-e", "EXECUTION_DATE=$currentDate",
        "-e", "RUN_ID=$runId",
        "-e", "DAG_ID=test_dag",
        "-e", "TASK_ID=test_task",
        "-e", "TASK_TYPE=main",
        "$ImageName`:$Version"
    )
    
    Write-Host "Test en cours..." -ForegroundColor Yellow
    & docker @testCmd
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Test r√©ussi!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Test √©chou√©" -ForegroundColor Red
        Write-Host "üí° V√©rifiez les logs ci-dessus" -ForegroundColor Yellow
    }
    Write-Host ""
} else {
    Write-Host "‚è≠Ô∏è Tests ignor√©s (-SkipTest sp√©cifi√©)" -ForegroundColor Yellow
    Write-Host ""
}

# Afficher les images disponibles
Write-Host "üìã Images Docker locales:" -ForegroundColor Cyan
docker images | Select-String -Pattern $ImageName
Write-Host ""

# Instructions finales
Write-Host "üéâ Build termin√©!" -ForegroundColor Green
Write-Host ""
Write-Host "üìù √âtapes suivantes:" -ForegroundColor Cyan
Write-Host "1. L'image $ImageName`:$Version est maintenant disponible localement" -ForegroundColor White
Write-Host "2. Votre DAG Airflow peut utiliser cette image directement" -ForegroundColor White
Write-Host "3. Testez le DAG dans l'interface Airflow" -ForegroundColor White
Write-Host ""
Write-Host "üîß Commandes utiles:" -ForegroundColor Cyan
Write-Host "  # Voir toutes les images:" -ForegroundColor Gray
Write-Host "  docker images" -ForegroundColor Yellow
Write-Host ""
Write-Host "  # Tester manuellement:" -ForegroundColor Gray
Write-Host "  docker run --rm -it $ImageName`:$Version" -ForegroundColor Yellow
Write-Host ""
Write-Host "  # Voir les logs d'un conteneur:" -ForegroundColor Gray
Write-Host "  docker logs [container_id]" -ForegroundColor Yellow
Write-Host ""
Write-Host "  # Supprimer l'image si besoin:" -ForegroundColor Gray
Write-Host "  docker rmi $ImageName`:$Version" -ForegroundColor Yellow
Write-Host ""

Write-Host "üèÅ Termin√©!" -ForegroundColor Green